apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: "com.jfrog.artifactory"
apply plugin: 'maven-publish'

group = 'ch.yanova.kolibri'
version = "0.9.4-SNAPSHOT"

android {
    compileSdkVersion 27
    buildToolsVersion "27.0.3"

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 27
        versionCode 93
        versionName project.version

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    lintOptions {
        abortOnError false
    }
}

configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        def requested = details.requested
        if (requested.group == 'com.android.support') {
            if (!requested.name.startsWith("multidex")) {
                details.useVersion '27.1.0'
            }
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'com.squareup.okhttp3:okhttp:3.8.1'
    implementation 'com.github.franmontiel:PersistentCookieJar:v1.0.1'
    implementation 'org.jsoup:jsoup:1.10.3'
    implementation 'com.google.code.gson:gson:2.8.1'
    implementation 'com.squareup.picasso:picasso:2.5.2'

    implementation 'com.android.support:design:27.1.0'
    implementation 'com.afollestad:aesthetic:0.4.7'

    compileOnly 'com.google.firebase:firebase-core:11.8.0'
    compileOnly 'com.google.firebase:firebase-messaging:11.8.0'

    compileOnly('com.crashlytics.sdk.android:crashlytics:2.6.8@aar') {
        transitive = true;
    }


    testImplementation 'junit:junit:4.12'
    testImplementation 'org.robolectric:robolectric:3.5.1'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'
}

publishing {
    publications {
        aar(MavenPublication) {
            groupId project.group
            version = project.version
            artifactId project.name

            // Tell maven to prepare the generated "*.aar" file for publishing
            artifact("$buildDir/outputs/aar/${project.getName()}-release.aar")
            artifact androidJavadocsJar
            artifact androidSourcesJar

            pom.withXml {
                def dependencies = asNode().appendNode('dependencies')
                configurations.getByName("releaseCompileClasspath").getResolvedConfiguration().getFirstLevelModuleDependencies().each {
                    def dependency = dependencies.appendNode('dependency')
                    dependency.appendNode('groupId', it.moduleGroup)
                    dependency.appendNode('artifactId', it.moduleName)
                    dependency.appendNode('version', it.moduleVersion)
                }
            }
        }
    }
}

artifactory {
    contextUrl = 'http://localhost:8081/artifactory'
    publish {
        repository {
            // The Artifactory repository key to publish to
            repoKey = project.version.endsWith('SNAPSHOT') ? 'libs-snapshot-local' : 'libs-release-local'
            maven = true
        }
        defaults {
            publications('aar')
            publishArtifacts = true
            publishPom = true
        }
    }
}

task androidJavadocs(type: Javadoc) {

    android.libraryVariants.all { variant ->
        if (variant.name == 'release') {
            owner.classpath += variant.javaCompile.classpath
        }
    }

    source = android.sourceSets.main.java.srcDirs
    ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator)) + configurations.compile + files(ext.androidJar)
    failOnError false

    options {
        links "http://docs.oracle.com/javase/7/docs/api/"
        linksOffline "http://d.android.com/reference", "${android.sdkDirectory}/docs/reference"
    }

    exclude '**/BuildConfig.java'
    exclude '**/R.java'
}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    classifier = 'javadoc'
    from androidJavadocs.destinationDir
}

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

artifacts {
    archives androidSourcesJar
    archives androidJavadocsJar
}

//task(':sdk:artifactoryPublish').mustRunAfter task(':sdk:bundleRelease')

artifactoryPublish {
    dependsOn ':sdk:bundleRelease'
}